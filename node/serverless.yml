service: mentor-graphql
frameworkVersion: '2 || 3'

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-domain-manager

custom:
  serverless-offline:
    httpPort: 3001
  domain:
    dev: api-dev.mentorpal.org
    qa: api-qa.mentorpal.org
    prod: api.mentorpal.org
  customDomain:
    domainName: ${self:custom.domain.${opt:stage, 'dev'}}
    basePath: 'graphql' # api root url becomes: api.mentorpal.org/graphql
    # certificateName: '*.mentorpal.org' didnt work
    # certificateName: 'c6107db7-c2ef-4e85-a21f-bee7d1ac008a' didnt work either
    stage: ${self:provider.stage}
    endpointType: 'regional'
    apiType: rest
    createRoute53Record: true
    securityPolicy: tls_1_2
    # we might have multiple services, better to manually invoke `sls create_domain`
    autoDomain: false

  stages:
    dev:
      LOG_LEVEL: 'trace'
      IS_SENTRY_ENABLED: false
      API_SECRET: ${ssm:/mentorpal/v2/shared/api_secret, ''}
      JWT_SECRET: ${ssm:/mentorpal/v2/shared/jwt_secret, ''}
      ALERT_SNS_ARN: ${ssm:/mentorpal/v2/shared/sns_alert_topic_arn, ''}
      # WEBACL_ARN: '${ssm:/mentorpal/mentor-graphql/qa/firewall/WEBACL_ARN}'
      MONGO_URI: '${ssm:/mentorpal/graphql/dev/mongo_uri}'
      NODE_ENV: 'careerfair-dev'
      STATIC_URL_BASE: 'https://static-v2.mentorpal.org/'
      CORS_ORIGIN: 'http://local.mentorpal.org:8000'
      GOOGLE_CLIENT_ID: ${ssm:/mentorpal/qa/shared/GOOGLE_CLIENT_ID, ''}
    qa:
      LOG_LEVEL: 'debug'
      IS_SENTRY_ENABLED: true
      API_SECRET: ${ssm:/mentorpal/v2/shared/api_secret, ''}
      JWT_SECRET: ${ssm:/mentorpal/v2/shared/jwt_secret, ''}
      # WEBACL_ARN: '${ssm:/mentorpal/mentor-graphql/qa/firewall/WEBACL_ARN}'
      MONGO_URI: '${ssm:/mentorpal/graphql/qa/mongo_uri}'
      NODE_ENV: 'careerfair-v2'
      STATIC_URL_BASE: 'https://static-v2.mentorpal.org/'
      CORS_ORIGIN: 'https://v2.mentorpal.org'
      GOOGLE_CLIENT_ID: ${ssm:/mentorpal/qa/shared/GOOGLE_CLIENT_ID, ''}
    prod:
      LOG_LEVEL: 'info'
      IS_SENTRY_ENABLED: true
      API_SECRET: ${ssm:/mentorpal/cf/shared/api_secret, ''}
      JWT_SECRET: ${ssm:/mentorpal/cf/shared/jwt_secret, ''}
      # WEBACL_ARN: '${ssm:/mentorpal/mentor-graphql/qa/firewall/WEBACL_ARN}'
      MONGO_URI: '${ssm:/mentorpal/graphql/prod/mongo_uri}'
      NODE_ENV: 'careerfair'
      STATIC_URL_BASE: 'https://static-careerfair.mentorpal.org/'
      CORS_ORIGIN: 'https://careerfair.mentorpal.org'
      GOOGLE_CLIENT_ID: ${ssm:/mentorpal/prod/shared/GOOGLE_CLIENT_ID, ''}

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'} # stage is dev unless otherwise specified with --stage flag
  runtime: nodejs16.x
  endpointType: regional
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  logRetentionInDays: 30
  apiGateway:
    minimumCompressionSize: 1024
  logs:
    restApi:
      # Enables HTTP access logs (default: true)
      accessLogging: true
      # # Log format to use for access logs
      # format: 'requestId: $context.requestId'
      # Enable execution logging (default: true)
      executionLogging: true
      level: INFO  # INFO or ERROR
      # Log full requests/responses for execution logging (default: true)
      fullExecutionData: true

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    STAGE: ${self:provider.stage}
    PYTHON_ENV: careerfair-${self:provider.stage}
    API_SECRET: ${self:custom.stages.${self:provider.stage}.API_SECRET}
    JWT_SECRET: ${self:custom.stages.${self:provider.stage}.API_SECRET}
    IS_SENTRY_ENABLED: ${self:custom.stages.${self:provider.stage}.IS_SENTRY_ENABLED}
    SENTRY_DSN_MENTOR_GRAPHQL: '${ssm:/mentorpal/graphql/sentry_dsn}'
    MONGO_URI: ${self:custom.stages.${self:provider.stage}.MONGO_URI}
    STATIC_URL_BASE: ${self:custom.stages.${self:provider.stage}.STATIC_URL_BASE}
    CORS_ORIGIN: ${self:custom.stages.${self:provider.stage}.CORS_ORIGIN}
    GOOGLE_CLIENT_ID: ${self:custom.stages.${self:provider.stage}.GOOGLE_CLIENT_ID}

  stackTags:
    ENVIRONMENT: ${self:provider.stage}
    PROJECT: ${self:service}-${self:provider.stage}
    REPOSITORY: mentor-graphql

functions:
  app:
    handler: ./src/lambda.handler
    events: 
      - http: 
          path: /
          method: GET
          cors: true
      - http: 
          path: /{proxy+}
          method: ANY
          # cors: true
